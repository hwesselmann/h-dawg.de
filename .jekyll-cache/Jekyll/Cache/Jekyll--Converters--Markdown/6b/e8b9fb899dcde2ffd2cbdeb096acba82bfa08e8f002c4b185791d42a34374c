I"à<p>Dass ich in einem Unternehmen arbeite, in dem seit nun gut einem Jahr das Scaled Agile Framework - kurz SAFe - eingesetzt wird, habe ich bereits erw√§hnt, oder? Heute geht es um Anforderungen und die Rolle des Kunden, so wie ich sie in meiner t√§glichen Arbeit mit und in SAFe erlebe!</p>

<h6 id="agil-funktioniert-durch-n√§he-zum-kunden-und-st√§ndiges-feedback">Agil funktioniert durch N√§he zum Kunden und st√§ndiges Feedback</h6>
<p>Die Idee von Agilit√§t wird gerade dadurch interessant und funktioniert in vielen F√§llen besser als andere Vorgehensweisen, weil der Kunde f√ºr die Entwicklung eines Produktes nicht nur punktuell, sondern permanent eingebunden wird - er kann und muss pr√§sent sein und steuern, indem er seine Anforderungen und sein Feedback zur L√∂sung sehr regelm√§√üig an das Entwicklerteam zur√ºck spielt. So kann am Ende das richtige, bestm√∂gliche Produkt (im Rahmen von Zeit und Budget) erstellt werden.</p>

<p>Im Scaled Agile Framework gibt es eine √úbersicht √ºber Rollen und Bereiche im sogenannten ‚ÄúBig Picture‚Äù. SAFe ist per Definition nicht nur pure Agilit√§t, es ist auch noch gr√∂√üere Agilit√§t als anderswo, weil skaliert. Das Element Kunde ist aber leider nicht zu sehen (es wurde quasi ‚Äúaus-skaliert‚Äù) - es existieren <strong>Proxy-Kunden</strong> in Form von Product Owner und Product Manager, allerdings spielt der Kunde im Rahmenwerk zumindest nicht so eine gewichtige Rolle, dass man ihn auf das gro√üe √úbersichtsbild setzen m√ºsste. Das ist wahrscheinlich der Entstehung von SAFe geschuldet: In dem Unternehmen, f√ºr das es urspr√ºnglich entworfen wurde, war der Kunde leider auch schon aus dem Fokus geraten‚Ä¶</p>

<h6 id="fehlender-kunde-na-und-das-haben-wir-vorher-doch-auch-schon-hingekriegt">Fehlender Kunde? Na und, das haben wir vorher doch auch schon hingekriegt!</h6>
<p>Warum ist der fehlende Bezug zum Kunden ein Problem, an dem ich mich st√∂re? Ganz einfach: Der Kunde soll das Produkt nutzen, er soll seine Anforderungen umgesetzt bekommen und soll ebenso deutlich sagen, was er nicht m√∂chte.
In einem Unternehmen, dass bereits vorher vom Kunden abstrahiert hat und dessen (Software-)Entwicklung eher durch Change Requests als durch echte Anforderungen getrieben ist, wird es sehr schwer, die agile Idee zu installieren. Change Requests ‚Äúkennen‚Äù die aktuelle L√∂sung eines Problems und wollen diese ver√§ndern. Oder sie wollen ein bestehendes System um eine neue Funktionalit√§t erweitern.</p>

<h6 id="die-l√∂sung-ist-die-l√∂sung">Die L√∂sung ist die L√∂sung</h6>
<p>Hierbei wird nicht selten eine Anforderung als gew√ºnschte L√∂sung beschrieben. Der Anforderungssteller glaubt zu wissen, welches die beste Umsetzung f√ºr seine Anfrage ist und setzt sich zu wenig mit dem Grund seines √Ñnderungswunsches auseinander. Gerade das kann aber zu erstaunlichen und innovativen L√∂sungen f√ºhren. Wenn er dem Entwicklungsteam verdeutlichen kann, was er will und warum er es will (‚ÄúWas will ich mit der neuen Funktionalit√§t erreichen?‚Äù), kann das Team eine effiziente und intuitive L√∂sung suchen, anstatt einfach nur einen Knopf an einer bestimmten Stelle im Men√º einzuf√ºgen (Obwohl das nat√ºrlich auch die richtige L√∂sung sein kann!).</p>

<p><em>Aber ist das nun ein spezifisches Problem von SAFe?</em> Nein. Es ist eine generelle Herausforderung beim Umstieg auf ein agileres Vorgehen bei der Entwicklung von L√∂sungen.</p>

<p>SAFe macht es aber leichter, einen klassischen CR-Prozess beizubehalten: Die verschiedenen Ebenen und Rollen fordern f√ºr jede Anforderungen einen bestimmten Basisprozess - eine Anforderung geht im Framework einen langen Weg, bis sie beim Entwicklungsteam ankommt. Zus√§tzlich taucht das Wort <em>Anforderung</em> nirgenwo allzu offen auf, schlie√ülich hat sich der Erfinder von SAFe sehr genau mit dem klassischen und dem agilen Requirements Engineering auseinander gesetzt und will hier Bedeutungskonflikte vermeiden. Das finde ich grunds√§tzlich gut, w√ºrde es nicht bei Worth√ºlsen wir <em>Epic</em> und <em>Feature</em> genauso zu Problemen mit der Definition kommen.</p>

<h6 id="das-framework-ist-nie-das-problem">Das Framework ist nie das Problem</h6>
<p>SAFe ist ein Framework und muss von Firmen implementiert werden. Ein Rahmenwerk gibt per Definition nur einen Rahmen. Und egal welches Framework nicht zu funktionieren scheint, ist es in der Realit√§t doch zu einem gro√üen Teil das implementierende Unternehmen, welches das Problem ist. Das gilt f√ºr SAFe genauso wie f√ºr ‚Äúunskalierte‚Äù Ans√§tze wir Scrum oder XP.
Bei SAFe habe ich allerdings allzu oft das Gef√ºhl, dass es uns leicht gemacht wird, in viele Fallen zu tappen und anschlie√üend zu glauben, dass das ganze agile Zeug auch nicht funktioniert.</p>

<p>Immerhin entwickelt sich das SAFe-Framework weiter und die Autoren lernen dazu: In der kommenden Version 4.0 taucht erstmals der Kunde auf. Leider an dem Punkt im ‚ÄúBig Picture‚Äù, der am weitesten von Product Owner und Entwicklungsteam entfernt ist‚Ä¶</p>
:ET