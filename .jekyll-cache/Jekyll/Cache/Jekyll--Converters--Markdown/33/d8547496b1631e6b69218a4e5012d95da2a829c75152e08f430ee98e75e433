I"È<p>In den Monaten seit M√§rz ist nicht wirklich viel passiert - die anhaltende Corona-Pandemie hat daf√ºr gesorgt, dass die DTB-Ranglisten mehr schl√§ft,  als das sie Updates erf√§hrt. Klar, es ist im Moment auch nicht so einfach: Lockdown I, dann ein kurzer intensiver Sommer und dann ein Lockdown II auf Raten. Immer wieder kurzfristig abgesagte Turniere oder als Alternative ziemlich √ºberf√ºllte Meldelisten. Das hatte ich mir in den <a href="https://www.h-dawg.de/nebenprojekt-ranking-info/">Osterferien anders vorgestellt</a>, als ich meine kleine Anwendung <strong><a href="https://www.ranking-info.net/">Ranking-Info</a></strong> ins Leben gerufen habe. Ich hatte angenommen, dass die regelm√§√üigen Updates der Rangliste kommen und die Anwendung dem Einen oder Anderen n√ºtzlich sein kann. So d√ºmpelte sie sicherlich mehr oder weniger vor sich hin. Da das kleine Projekt f√ºr mich aber auch zum Lernen und Ausprobieren dient, hat Ranking-Info keineswegs geschlafen! Teil eins meiner kleinen Update-Serie: Docker Multistage Builds bei Ranking-Info.</p>

<h2 id="docker-multistage-builds">Docker Multistage Builds</h2>

<p>Das Docker-Image f√ºr das Deployment von Ranking-Info war bisher ziemlich gewichtig: rund 1,07 GB brachte es auf die Waage. Aber warum?  Die Anwendung selber ist ja nicht gerade umfangreich und Konfiguration, Bilder und sonstige Bestandteile bringen auch nicht viele Daten dazu. Schuld an der enormen Image-Gr√∂√üe sind die vielen Abh√§ngigkeiten und Build-Artefakte f√ºr die Installation der ben√∂tigten Rubygems. Zudem basiert das Ruby-Basisimage auf Debian Buster und bringt schon einige nicht ben√∂tigte Programme und Bibliotheken mit.</p>

<p>Die L√∂sung? Ranking Info nutzt Docker Multistage Builds! Der einfache Trick ist die Nutzung von zwei Images - eines zum Bauen der Software und eines f√ºr das Deployment. Informationen gibt es dazu im Internet tonnenweise. Und sicherlich auch verst√§ndlichere Informationen, als ich sie liefern k√∂nnte :-)<br />
Die Methode verlagert das Bauen der Rubygems inklusive der ben√∂tigten Linux-Bibliotheken in das Build-Image. In das Ziel-Image kommen dann nur noch die Binaries und die Applikation selbst. Zus√§tzlich basiert das Deployment Image nicht mehr auf Debian, sondern auf Alpine (ein sehr schlankes Linux extra f√ºr Container konzipiert). Das Ergebnis? 220 MB - mehr als 80% weniger als vorher.</p>

<pre class="wp-block-code"><code>REPOSITORY                                                    TAG                 SIZE
docker.pkg.github.com/hwesselmann/ranking-info/ranking-info   1.4.4               220MB</code></pre>

<p>Ein weiterer netter Effekt: F√ºr viele Schritte beim Zusammenbau des Docker-Images nun der Docker-Cache genutzt werden kann. Der Build produziert also nicht nur ein kleineres Artefakt, sondern geht in vielen F√§llen auch schneller!</p>

<p>Das Projekt findert ihr auf <a href="https://github.com/hwesselmann/ranking-info">Github</a>, das Dockerfile <a href="https://github.com/hwesselmann/ranking-info/blob/main/Dockerfile">hier</a>!</p>
:ET